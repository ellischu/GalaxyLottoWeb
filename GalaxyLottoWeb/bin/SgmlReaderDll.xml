<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SgmlReaderDll</name>
    </assembly>
    <members>
        <member name="T:Sgml.DesktopEntityResolver">
            <summary>
            A special implementation for IEntityResolver that uses System.IO to access local files
            and HttpWebRequest for web content.
            </summary>
        </member>
        <member name="P:Sgml.DesktopEntityResolver.Proxy">
            <summary>
            Get or set the WebProxy to use for web requests.
            </summary>
        </member>
        <member name="M:Sgml.DesktopEntityResolver.GetContent(System.Uri)">
            <summary>
            Open the given Uri.  If the Uri is relative then it could be referring to either a local file or
            an embedded resource.
            </summary>
            <param name="uri">the absolute or relative Uri of the resource to load</param>
            <returns>The stream, or throws exception if the resource is not found</returns>
        </member>
        <member name="T:Sgml.EmbeddedResourceEntityContent">
            <summary>
            A special implementation of IEntityContent that can load content
            from embedded resources.
            </summary>
        </member>
        <member name="M:Sgml.EmbeddedResourceEntityContent.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Construct a new EmbeddedResourceEntityContent.
            </summary>
            <param name="assembly">The assembly to read resources from</param>
            <param name="name">The name of the embedded resource</param>
        </member>
        <member name="P:Sgml.EmbeddedResourceEntityContent.Encoding">
            <summary>
            Return the encoding from HTTP header
            </summary>
        </member>
        <member name="P:Sgml.EmbeddedResourceEntityContent.MimeType">
            <summary>
            Return the HTTP ContentType
            </summary>
        </member>
        <member name="P:Sgml.EmbeddedResourceEntityContent.Redirect">
            <summary>
            Returns the redirect Uri if an HTTP redirect happened during the fetching of this resource.
            </summary>
        </member>
        <member name="M:Sgml.EmbeddedResourceEntityContent.Open">
            <summary>
            Return the encoding from HTTP header
            </summary>
        </member>
        <member name="T:Sgml.IEntityResolver">
            <summary>
            Since .NET Portable has no FileStream and a completey differnet way to load manifest resource streams
            we invent an interface here to abstract out the difference from SgmlReader.  Any time SgmlReader needs
            to load a DTD or extern DTD entity it will use this interface instead.
            </summary>
        </member>
        <member name="M:Sgml.IEntityResolver.GetContent(System.Uri)">
            <summary>
            Open the given Uri.  If the Uri is relative then it could be referring to either a local file or
            an embedded resource.
            </summary>
            <param name="uri">the absolute or relative Uri of the resource to load</param>
            <returns>The stream, or throws exception if the resource is not found</returns>
        </member>
        <member name="T:Sgml.IEntityContent">
            <summary>
            An interface that represents a loadable XML entity returned from IEntityResolver.
            </summary>
        </member>
        <member name="M:Sgml.IEntityContent.Open">
            <summary>
            Open the stream
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sgml.IEntityContent.Encoding">
            <summary>
            Return the encoding from HTTP header
            </summary>
        </member>
        <member name="P:Sgml.IEntityContent.MimeType">
            <summary>
            Return the HTTP ContentType
            </summary>
        </member>
        <member name="P:Sgml.IEntityContent.Redirect">
            <summary>
            Returns the redirect Uri if an HTTP redirect happened during the fetching of this resource.
            </summary>
        </member>
        <member name="T:Sgml.SgmlParseException">
            <summary>
            Thrown if any errors occur while parsing the source.
            </summary>
        </member>
        <member name="M:Sgml.SgmlParseException.#ctor">
            <summary>
            Instantiates a new instance of SgmlParseException with no specific error information.
            </summary>
        </member>
        <member name="M:Sgml.SgmlParseException.#ctor(System.String)">
            <summary>
            Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
        </member>
        <member name="M:Sgml.SgmlParseException.#ctor(System.String,Sgml.Entity)">
            <summary>
            Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
            <param name="e">The entity on which the error occurred.</param>
        </member>
        <member name="M:Sgml.SgmlParseException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
            <param name="innerException">The original exception that caused the problem.</param>
        </member>
        <member name="P:Sgml.SgmlParseException.EntityContext">
            <summary>
            Contextual information detailing the entity on which the error occurred.
            </summary>
        </member>
        <member name="T:Sgml.LiteralType">
            <summary>
            The different types of literal text returned by the SgmlParser.
            </summary>
        </member>
        <member name="F:Sgml.LiteralType.CDATA">
            <summary>
            CDATA text literals.
            </summary>
        </member>
        <member name="F:Sgml.LiteralType.SDATA">
            <summary>
            SDATA entities.
            </summary>
        </member>
        <member name="F:Sgml.LiteralType.PI">
            <summary>
            The contents of a Processing Instruction.
            </summary>
        </member>
        <member name="T:Sgml.Entity">
            <summary>
            An Entity declared in a DTD.
            </summary>
        </member>
        <member name="F:Sgml.Entity.EOF">
            <summary>
            The character indicating End Of File.
            </summary>
        </member>
        <member name="M:Sgml.Entity.#ctor(System.String,System.String,System.String,Sgml.IEntityResolver)">
            <summary>
            Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="pubid">The public id of the entity.</param>
            <param name="uri">The uri of the entity.</param>
            <param name="resolver">The resolver to use for loading this entity</param>
        </member>
        <member name="M:Sgml.Entity.#ctor(System.String,System.String,Sgml.IEntityResolver)">
            <summary>
            Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="literal">The literal value of the entity.</param>
            <param name="resolver">The resolver to use for loading this entity</param>
        </member>
        <member name="M:Sgml.Entity.#ctor(System.String,System.Uri,System.IO.TextReader,Sgml.IEntityResolver)">
            <summary>
            Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="baseUri">The baseUri for the entity to read from the TextReader.</param>
            <param name="stm">The TextReader to read the entity from.</param>
            <param name="resolver">The resolver to use for loading this entity</param>
        </member>
        <member name="P:Sgml.Entity.Name">
            <summary>
            The name of the entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.IsHtml">
            <summary>
            True if the entity is the html element entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.PublicId">
            <summary>
            The public identifier of this entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.Uri">
            <summary>
            The Uri that is the source for this entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.ResolvedUri">
            <summary>
            The resolved location of the DTD this entity is from.
            </summary>
        </member>
        <member name="P:Sgml.Entity.Parent">
            <summary>
            Gets the parent Entity of this Entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.Lastchar">
            <summary>
            The last character read from the input stream for this entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.Line">
            <summary>
            The line on which this entity was defined.
            </summary>
        </member>
        <member name="P:Sgml.Entity.LinePosition">
            <summary>
            The index into the line where this entity is defined.
            </summary>
        </member>
        <member name="P:Sgml.Entity.IsInternal">
            <summary>
            Whether this entity is an internal entity or not.
            </summary>
            <value>true if this entity is internal, otherwise false.</value>
        </member>
        <member name="P:Sgml.Entity.Literal">
            <summary>
            The literal value of this entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.LiteralType">
            <summary>
            The <see cref="P:Sgml.Entity.LiteralType"/> of this entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.IsWhitespace">
            <summary>
            Whether the last char read for this entity is a whitespace character.
            </summary>
        </member>
        <member name="M:Sgml.Entity.ReadChar">
            <summary>
            Reads the next character from the DTD stream.
            </summary>
            <returns>The next character from the DTD stream.</returns>
        </member>
        <member name="M:Sgml.Entity.Open(Sgml.Entity,System.Uri)">
            <summary>
            Begins processing an entity.
            </summary>
            <param name="parent">The parent of this entity.</param>
            <param name="baseUri">The base Uri for processing this entity within.</param>
        </member>
        <member name="P:Sgml.Entity.Encoding">
            <summary>
            Gets the character encoding for this entity.
            </summary>
        </member>
        <member name="M:Sgml.Entity.Close">
            <summary>
            Closes the reader from which the entity is being read.
            </summary>
        </member>
        <member name="M:Sgml.Entity.SkipWhitespace">
            <summary>
            Returns the next character after any whitespace.
            </summary>
            <returns>The next character that is not whitespace.</returns>
        </member>
        <member name="M:Sgml.Entity.ScanToken(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Scans a token from the input stream and returns the result.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to use to process the token.</param>
            <param name="term">A set of characters to look for as terminators for the token.</param>
            <param name="nmtoken">true if the token should be a NMToken, otherwise false.</param>
            <returns>The scanned token.</returns>
        </member>
        <member name="M:Sgml.Entity.ScanLiteral(System.Text.StringBuilder,System.Char)">
            <summary>
            Read a literal from the input stream.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to use to build the literal.</param>
            <param name="quote">The delimiter for the literal.</param>
            <returns>The literal scanned from the input stream.</returns>
        </member>
        <member name="M:Sgml.Entity.ScanToEnd(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Reads input until the end of the input stream or until a string of terminator characters is found.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to use to build the string.</param>
            <param name="type">The type of the element being read (only used in reporting errors).</param>
            <param name="terminators">The string of terminator characters to look for.</param>
            <returns>The string read from the input stream.</returns>
        </member>
        <member name="M:Sgml.Entity.ExpandCharEntity">
            <summary>
            Expands a character entity to be read from the input stream.
            </summary>
            <returns>The string for the character entity.</returns>
        </member>
        <member name="M:Sgml.Entity.Error(System.String)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <exception cref="T:Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:Sgml.Entity.Error(System.String,System.Char)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="ch">The unexpected character causing the error.</param>
            <exception cref="T:Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:Sgml.Entity.Error(System.String,System.Int32)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="x">The value causing the error.</param>
            <exception cref="T:Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:Sgml.Entity.Error(System.String,System.String)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="arg">The argument for the error.</param>
            <exception cref="T:Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:Sgml.Entity.Context">
            <summary>
            Returns a string giving information on how the entity is referenced and declared, walking up the parents until the top level parent entity is found.
            </summary>
            <returns>Contextual information for the entity.</returns>
        </member>
        <member name="M:Sgml.Entity.IsLiteralType(System.String)">
            <summary>
            Checks whether a token denotes a literal entity or not.
            </summary>
            <param name="token">The token to check.</param>
            <returns>true if the token is "CDATA", "SDATA" or "PI", otherwise false.</returns>
        </member>
        <member name="M:Sgml.Entity.SetLiteralType(System.String)">
            <summary>
            Sets the entity to be a literal of the type specified.
            </summary>
            <param name="token">One of "CDATA", "SDATA" or "PI".</param>
        </member>
        <member name="M:Sgml.Entity.Finalize">
            <summary>
            The finalizer for the Entity class.
            </summary>
        </member>
        <member name="M:Sgml.Entity.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
        </member>
        <member name="M:Sgml.Entity.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
            <param name="isDisposing">true if this method has been called by user code, false if it has been called through a finalizer.</param>
        </member>
        <member name="T:Sgml.ElementDecl">
            <summary>
            An element declaration in a DTD.
            </summary>
        </member>
        <member name="M:Sgml.ElementDecl.#ctor(System.String,System.Boolean,System.Boolean,Sgml.ContentModel,System.String[],System.String[])">
            <summary>
            Initialises a new element declaration instance.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="startTagOptional">Whether the start tag is optional.</param>
            <param name="endTagOptional">Whether the end tag is optional.</param>
            <param name="contentModel">The <see cref="P:Sgml.ElementDecl.ContentModel"/> of the element.</param>
            <param name="inclusions"></param>
            <param name="exclusions"></param>
        </member>
        <member name="P:Sgml.ElementDecl.Name">
            <summary>
            The element name.
            </summary>
        </member>
        <member name="P:Sgml.ElementDecl.ContentModel">
            <summary>
            The <see cref="T:Sgml.ContentModel"/> of the element declaration.
            </summary>
        </member>
        <member name="P:Sgml.ElementDecl.EndTagOptional">
            <summary>
            Whether the end tag of the element is optional.
            </summary>
            <value>true if the end tag of the element is optional, otherwise false.</value>
        </member>
        <member name="P:Sgml.ElementDecl.StartTagOptional">
            <summary>
            Whether the start tag of the element is optional.
            </summary>
            <value>true if the start tag of the element is optional, otherwise false.</value>
        </member>
        <member name="M:Sgml.ElementDecl.FindAttribute(System.String)">
            <summary>
            Finds the attribute definition with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:Sgml.AttDef"/> to find.</param>
            <returns>The <see cref="T:Sgml.AttDef"/> with the specified name.</returns>
            <exception cref="T:System.InvalidOperationException">If the attribute list has not yet been initialised.</exception>
        </member>
        <member name="M:Sgml.ElementDecl.AddAttDefs(System.Collections.Generic.Dictionary{System.String,Sgml.AttDef})">
            <summary>
            Adds attribute definitions to the element declaration.
            </summary>
            <param name="list">The list of attribute definitions to add.</param>
        </member>
        <member name="M:Sgml.ElementDecl.CanContain(System.String,Sgml.SgmlDtd)">
            <summary>
            Tests whether this element can contain another specified element.
            </summary>
            <param name="name">The name of the element to check for.</param>
            <param name="dtd">The DTD to use to do the check.</param>
            <returns>True if the specified element can be contained by this element.</returns>
        </member>
        <member name="T:Sgml.DeclaredContent">
            <summary>
            Where nested subelements cannot occur within an element, its contents can be declared to consist of one of the types of declared content contained in this enumeration.
            </summary>
        </member>
        <member name="F:Sgml.DeclaredContent.Default">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="F:Sgml.DeclaredContent.CDATA">
            <summary>
            Character data (CDATA), which contains only valid SGML characters.
            </summary>
        </member>
        <member name="F:Sgml.DeclaredContent.RCDATA">
            <summary>
            Replaceable character data (RCDATA), which can contain text, character references and/or general entity references that resolve to character data.
            </summary>
        </member>
        <member name="F:Sgml.DeclaredContent.EMPTY">
            <summary>
            Empty element (EMPTY), i.e. having no contents, or contents that can be generated by the program.
            </summary>
        </member>
        <member name="T:Sgml.ContentModel">
            <summary>
            Defines the content model for an element.
            </summary>
        </member>
        <member name="M:Sgml.ContentModel.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Sgml.ContentModel"/> class.
            </summary>
        </member>
        <member name="P:Sgml.ContentModel.CurrentDepth">
            <summary>
            The number of groups on the stack.
            </summary>
        </member>
        <member name="P:Sgml.ContentModel.DeclaredContent">
            <summary>
            The allowed child content, specifying if nested children are not allowed and if so, what content is allowed.
            </summary>
        </member>
        <member name="M:Sgml.ContentModel.PushGroup">
            <summary>
            Begins processing of a nested model group.
            </summary>
        </member>
        <member name="M:Sgml.ContentModel.PopGroup">
            <summary>
            Finishes processing of a nested model group.
            </summary>
            <returns>The current depth of the group nesting, or -1 if there are no more groups to pop.</returns>
        </member>
        <member name="M:Sgml.ContentModel.AddSymbol(System.String)">
            <summary>
            Adds a new symbol to the current group's members.
            </summary>
            <param name="sym">The symbol to add.</param>
        </member>
        <member name="M:Sgml.ContentModel.AddConnector(System.Char)">
            <summary>
            Adds a connector onto the member list for the current group.
            </summary>
            <param name="c">The connector character to add.</param>
            <exception cref="T:Sgml.SgmlParseException">
            If the content is not mixed and has no members yet, or if the group type has been set and the
            connector does not match the group type.
            </exception>
        </member>
        <member name="M:Sgml.ContentModel.AddOccurrence(System.Char)">
            <summary>
            Adds an occurrence character for the current model group, setting it's <see cref="T:Sgml.Occurrence"/> value.
            </summary>
            <param name="c">The occurrence character.</param>
        </member>
        <member name="M:Sgml.ContentModel.SetDeclaredContent(System.String)">
            <summary>
            Sets the contained content for the content model.
            </summary>
            <param name="dc">The text specified the permissible declared child content.</param>
        </member>
        <member name="M:Sgml.ContentModel.CanContain(System.String,Sgml.SgmlDtd)">
            <summary>
            Checks whether an element using this group can contain a specified element.
            </summary>
            <param name="name">The name of the element to look for.</param>
            <param name="dtd">The DTD to use during the checking.</param>
            <returns>true if an element using this group can contain the element, otherwise false.</returns>
        </member>
        <member name="T:Sgml.GroupType">
            <summary>
            The type of the content model group, defining the order in which child elements can occur.
            </summary>
        </member>
        <member name="F:Sgml.GroupType.None">
            <summary>
            No model group.
            </summary>
        </member>
        <member name="F:Sgml.GroupType.And">
            <summary>
            All elements must occur, in any order.
            </summary>
        </member>
        <member name="F:Sgml.GroupType.Or">
            <summary>
            One (and only one) must occur.
            </summary>
        </member>
        <member name="F:Sgml.GroupType.Sequence">
            <summary>
            All element must occur, in the specified order.
            </summary>
        </member>
        <member name="T:Sgml.Occurrence">
            <summary>
            Qualifies the occurrence of a child element within a content model group.
            </summary>
        </member>
        <member name="F:Sgml.Occurrence.Required">
            <summary>
            The element is required and must occur only once.
            </summary>
        </member>
        <member name="F:Sgml.Occurrence.Optional">
            <summary>
            The element is optional and must occur once at most.
            </summary>
        </member>
        <member name="F:Sgml.Occurrence.ZeroOrMore">
            <summary>
            The element is optional and can be repeated.
            </summary>
        </member>
        <member name="F:Sgml.Occurrence.OneOrMore">
            <summary>
            The element must occur at least once or more times.
            </summary>
        </member>
        <member name="T:Sgml.Group">
            <summary>
            Defines a group of elements nested within another element.
            </summary>
        </member>
        <member name="P:Sgml.Group.Occurrence">
            <summary>
            The <see cref="P:Sgml.Group.Occurrence"/> of this group.
            </summary>
        </member>
        <member name="P:Sgml.Group.TextOnly">
            <summary>
            Checks whether the group contains only text.
            </summary>
            <value>true if the group is of mixed content and has no members, otherwise false.</value>
        </member>
        <member name="P:Sgml.Group.Parent">
            <summary>
            The parent group of this group.
            </summary>
        </member>
        <member name="M:Sgml.Group.#ctor(Sgml.Group)">
            <summary>
            Initialises a new Content Model Group.
            </summary>
            <param name="parent">The parent model group.</param>
        </member>
        <member name="M:Sgml.Group.AddGroup(Sgml.Group)">
            <summary>
            Adds a new child model group to the end of the group's members.
            </summary>
            <param name="g">The model group to add.</param>
        </member>
        <member name="M:Sgml.Group.AddSymbol(System.String)">
            <summary>
            Adds a new symbol to the group's members.
            </summary>
            <param name="sym">The symbol to add.</param>
        </member>
        <member name="M:Sgml.Group.AddConnector(System.Char)">
            <summary>
            Adds a connector onto the member list.
            </summary>
            <param name="c">The connector character to add.</param>
            <exception cref="T:Sgml.SgmlParseException">
            If the content is not mixed and has no members yet, or if the group type has been set and the
            connector does not match the group type.
            </exception>
        </member>
        <member name="M:Sgml.Group.AddOccurrence(System.Char)">
            <summary>
            Adds an occurrence character for this group, setting it's <see cref="P:Sgml.Group.Occurrence"/> value.
            </summary>
            <param name="c">The occurrence character.</param>
        </member>
        <member name="M:Sgml.Group.CanContain(System.String,Sgml.SgmlDtd)">
            <summary>
            Checks whether an element using this group can contain a specified element.
            </summary>
            <param name="name">The name of the element to look for.</param>
            <param name="dtd">The DTD to use during the checking.</param>
            <returns>true if an element using this group can contain the element, otherwise false.</returns>
            <remarks>
            Rough approximation - this is really assuming an "Or" group
            </remarks>
        </member>
        <member name="T:Sgml.AttributeType">
            <summary>
            Defines the different possible attribute types.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.Default">
            <summary>
            Attribute type not specified.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.CDATA">
            <summary>
            The attribute contains text (with no markup).
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.ENTITY">
            <summary>
            The attribute contains an entity declared in a DTD.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.ENTITIES">
            <summary>
            The attribute contains a number of entities declared in a DTD.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.ID">
            <summary>
            The attribute is an id attribute uniquely identifie the element it appears on.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.IDREF">
            <summary>
            The attribute value can be any declared subdocument or data entity name.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.IDREFS">
            <summary>
            The attribute value is a list of (space separated) declared subdocument or data entity names.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NAME">
            <summary>
            The attribute value is a SGML Name.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NAMES">
            <summary>
            The attribute value is a list of (space separated) SGML Names.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NMTOKEN">
            <summary>
            The attribute value is an XML name token (i.e. contains only name characters, but in this case with digits and other valid name characters accepted as the first character).
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NMTOKENS">
            <summary>
            The attribute value is a list of (space separated) XML NMTokens.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NUMBER">
            <summary>
            The attribute value is a number.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NUMBERS">
            <summary>
            The attribute value is a list of (space separated) numbers.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NUTOKEN">
            <summary>
            The attribute value is a number token (i.e. a name that starts with a number).
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NUTOKENS">
            <summary>
            The attribute value is a list of number tokens.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NOTATION">
            <summary>
            Attribute value is a member of the bracketed list of notation names that qualifies this reserved name.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.ENUMERATION">
            <summary>
            The attribute value is one of a set of allowed names.
            </summary>
        </member>
        <member name="T:Sgml.AttributePresence">
            <summary>
            Defines the different constraints on an attribute's presence on an element.
            </summary>
        </member>
        <member name="F:Sgml.AttributePresence.Default">
            <summary>
            The attribute has a default value, and its presence is optional.
            </summary>
        </member>
        <member name="F:Sgml.AttributePresence.Fixed">
            <summary>
            The attribute has a fixed value, if present.
            </summary>
        </member>
        <member name="F:Sgml.AttributePresence.Required">
            <summary>
            The attribute must always be present on every element.
            </summary>
        </member>
        <member name="F:Sgml.AttributePresence.Implied">
            <summary>
            The element is optional.
            </summary>
        </member>
        <member name="T:Sgml.AttDef">
            <summary>
            An attribute definition in a DTD.
            </summary>
        </member>
        <member name="M:Sgml.AttDef.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:Sgml.AttDef"/> class.
            </summary>
            <param name="name">The name of the attribute.</param>
        </member>
        <member name="P:Sgml.AttDef.Name">
            <summary>
            The name of the attribute declared by this attribute definition.
            </summary>
        </member>
        <member name="P:Sgml.AttDef.Default">
            <summary>
            Gets of sets the default value of the attribute.
            </summary>
        </member>
        <member name="P:Sgml.AttDef.AttributePresence">
            <summary>
            The constraints on the attribute's presence on an element.
            </summary>
        </member>
        <member name="P:Sgml.AttDef.EnumValues">
            <summary>
            Gets or sets the possible enumerated values for the attribute.
            </summary>
        </member>
        <member name="M:Sgml.AttDef.SetEnumeratedType(System.String[],Sgml.AttributeType)">
            <summary>
            Sets the attribute definition to have an enumerated value.
            </summary>
            <param name="enumValues">The possible values in the enumeration.</param>
            <param name="type">The type to set the attribute to.</param>
            <exception cref="T:System.ArgumentException">If the type parameter is not either <see cref="F:Sgml.AttributeType.ENUMERATION"/> or <see cref="F:Sgml.AttributeType.NOTATION"/>.</exception>
        </member>
        <member name="P:Sgml.AttDef.Type">
            <summary>
            The <see cref="T:Sgml.AttributeType"/> of the attribute declaration.
            </summary>
        </member>
        <member name="M:Sgml.AttDef.SetType(System.String)">
            <summary>
            Sets the type of the attribute definition.
            </summary>
            <param name="type">The string representation of the attribute type, corresponding to the values in the <see cref="T:Sgml.AttributeType"/> enumeration.</param>
        </member>
        <member name="M:Sgml.AttDef.SetPresence(System.String)">
            <summary>
            Sets the attribute presence declaration.
            </summary>
            <param name="token">The string representation of the attribute presence, corresponding to one of the values in the <see cref="P:Sgml.AttDef.AttributePresence"/> enumeration.</param>
            <returns>true if the attribute presence implies the element has a default value.</returns>
        </member>
        <member name="T:Sgml.SgmlDtd">
            <summary>
            Provides DTD parsing and support for the SgmlParser framework.
            </summary>
        </member>
        <member name="M:Sgml.SgmlDtd.#ctor(System.String,System.Xml.XmlNameTable,Sgml.IEntityResolver)">
            <summary>
            Initialises a new instance of the <see cref="T:Sgml.SgmlDtd"/> class.
            </summary>
            <param name="name">The name of the DTD.</param>
            <param name="nt">The <see cref="T:System.Xml.XmlNameTable"/> is NOT used.</param>
            <param name="resolver">The resolver to use for loading this entity</param>
        </member>
        <member name="P:Sgml.SgmlDtd.Name">
            <summary>
            The name of the DTD.
            </summary>
        </member>
        <member name="P:Sgml.SgmlDtd.NameTable">
            <summary>
            Gets the XmlNameTable associated with this implementation.
            </summary>
            <value>The XmlNameTable enabling you to get the atomized version of a string within the node.</value>
        </member>
        <member name="M:Sgml.SgmlDtd.Parse(System.Uri,System.String,System.String,System.String,System.String,System.Xml.XmlNameTable,Sgml.IEntityResolver)">
            <summary>
            Parses a DTD and creates a <see cref="T:Sgml.SgmlDtd"/> instance that encapsulates the DTD.
            </summary>
            <param name="baseUri">The base URI of the DTD.</param>
            <param name="name">The name of the DTD.</param>
            <param name="pubid"></param>
            <param name="url"></param>
            <param name="subset"></param>
            <param name="nt">The <see cref="T:System.Xml.XmlNameTable"/> is NOT used.</param>
            <param name="resolver">The resolver to use for loading this entity</param>
            <returns>A new <see cref="T:Sgml.SgmlDtd"/> instance that encapsulates the DTD.</returns>
        </member>
        <member name="M:Sgml.SgmlDtd.Parse(System.Uri,System.String,System.IO.TextReader,System.String,System.Xml.XmlNameTable,Sgml.IEntityResolver)">
            <summary>
            Parses a DTD and creates a <see cref="T:Sgml.SgmlDtd"/> instance that encapsulates the DTD.
            </summary>
            <param name="baseUri">The base URI of the DTD.</param>
            <param name="name">The name of the DTD.</param>
            <param name="input">The reader to load the DTD from.</param>
            <param name="subset"></param>
            <param name="nt">The <see cref="T:System.Xml.XmlNameTable"/> is NOT used.</param>
            <param name="resolver">The resolver to use for loading this entity</param>
            <returns>A new <see cref="T:Sgml.SgmlDtd"/> instance that encapsulates the DTD.</returns>
        </member>
        <member name="M:Sgml.SgmlDtd.FindEntity(System.String)">
            <summary>
            Finds an entity in the DTD with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:Sgml.Entity"/> to find.</param>
            <returns>The specified Entity from the DTD.</returns>
        </member>
        <member name="M:Sgml.SgmlDtd.FindElement(System.String)">
            <summary>
            Finds an element declaration in the DTD with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:Sgml.ElementDecl"/> to find and return.</param>
            <returns>The <see cref="T:Sgml.ElementDecl"/> matching the specified name.</returns>
        </member>
        <member name="M:Sgml.SgmlDtd.GetEntitiesLiteralNameLookup">
            <summary>
            Returns a dictionary for looking up entities by their <see cref="P:Sgml.Entity.Literal"/> value.
            </summary>
            <returns>A dictionary for looking up entities by their <see cref="P:Sgml.Entity.Literal"/> value.</returns>
        </member>
        <member name="T:Sgml.CaseFolding">
            <summary>
            SGML is case insensitive, so here you can choose between converting
            to lower case or upper case tags.  "None" means that the case is left
            alone, except that end tags will be folded to match the start tags.
            </summary>
        </member>
        <member name="F:Sgml.CaseFolding.None">
            <summary>
            Do not convert case, except for converting end tags to match start tags.
            </summary>
        </member>
        <member name="F:Sgml.CaseFolding.ToUpper">
            <summary>
            Convert tags to upper case.
            </summary>
        </member>
        <member name="F:Sgml.CaseFolding.ToLower">
            <summary>
            Convert tags to lower case.
            </summary>
        </member>
        <member name="T:Sgml.HWStack`1">
            <summary>
            This stack maintains a high water mark for allocated objects so the client
            can reuse the objects in the stack to reduce memory allocations, this is
            used to maintain current state of the parser for element stack, and attributes
            in each element.
            </summary>
        </member>
        <member name="M:Sgml.HWStack`1.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the HWStack class.
            </summary>
            <param name="growth">The amount to grow the stack space by, if more space is needed on the stack.</param>
        </member>
        <member name="P:Sgml.HWStack`1.Count">
            <summary>
            The number of items currently in the stack.
            </summary>
        </member>
        <member name="P:Sgml.HWStack`1.Size">
            <summary>
            The size (capacity) of the stack.
            </summary>
        </member>
        <member name="P:Sgml.HWStack`1.Item(System.Int32)">
            <summary>
            Returns the item at the requested index or null if index is out of bounds
            </summary>
            <param name="i">The index of the item to retrieve.</param>
            <returns>The item at the requested index or null if index is out of bounds.</returns>
        </member>
        <member name="M:Sgml.HWStack`1.Pop">
            <summary>
            Removes and returns the item at the top of the stack
            </summary>
            <returns>The item at the top of the stack.</returns>
        </member>
        <member name="M:Sgml.HWStack`1.Push">
            <summary>
            Pushes a new slot at the top of the stack.
            </summary>
            <returns>The object at the top of the stack.</returns>
            <remarks>
            This method tries to reuse a slot, if it returns null then
            the user has to call the other Push method.
            </remarks>
        </member>
        <member name="M:Sgml.HWStack`1.RemoveAt(System.Int32)">
            <summary>
            Remove a specific item from the stack.
            </summary>
            <param name="i">The index of the item to remove.</param>
        </member>
        <member name="T:Sgml.Attribute">
            <summary>
            This class represents an attribute.  The AttDef is assigned
            from a validation process, and is used to provide default values.
            </summary>
        </member>
        <member name="M:Sgml.Attribute.Reset(System.String,System.String,System.Char)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method.
            </summary>
        </member>
        <member name="T:Sgml.Node">
            <summary>
            This class models an XML node, an array of elements in scope is maintained while parsing
            for validation purposes, and these Node objects are reused to reduce object allocation,
            hence the reset method.  
            </summary>
        </member>
        <member name="M:Sgml.Node.Reset(System.String,System.Xml.XmlNodeType,System.String)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method. 
            </summary>
        </member>
        <member name="T:Sgml.SgmlReader">
            <summary>
            SgmlReader is an XmlReader API over any SGML document (including built in 
            support for HTML).  
            </summary>
        </member>
        <member name="F:Sgml.SgmlReader.UNDEFINED_NAMESPACE">
            <summary>
            The value returned when a namespace is queried and none has been specified.
            </summary>
        </member>
        <member name="M:Sgml.SgmlReader.#ctor">
            <summary>
            Initialises a new instance of the SgmlReader class.
            </summary>
        </member>
        <member name="M:Sgml.SgmlReader.#ctor(System.Xml.XmlNameTable)">
            <summary>
            Initialises a new instance of the SgmlReader class with an existing <see cref="T:System.Xml.XmlNameTable"/>, which is NOT used.
            </summary>
            <param name="nt">The nametable to use.</param>
        </member>
        <member name="M:Sgml.SgmlReader.#ctor(System.Xml.XmlReaderSettings)">
            <summary>
            Initialises a new instance of the SgmlReader class.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.Dtd">
            <summary>
            Specify the SgmlDtd object directly.  This allows you to cache the Dtd and share
            it across multipl SgmlReaders.  To load a DTD from a URL use the SystemLiteral property.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.Resolver">
            <summary>
            On portable platforms the mechanism for loading files is different.  For example,
            WinRT uses StorageFile, HttpClient and Windows.ApplicationModel.Resources.ResourceLoader.  
            So the caller must implement this interface and provide the platform specific mechanism
            for finding relative resources (DTDs, external entities, etc).
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.DocType">
            <summary>
            The name of root element specified in the DOCTYPE tag.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.RootElementName">
            <summary>
            The root element of the document.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.PublicIdentifier">
            <summary>
            The PUBLIC identifier in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.SystemLiteral">
            <summary>
            The SYSTEM literal in the DOCTYPE tag identifying the location of the DTD.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.InternalSubset">
            <summary>
            The DTD internal subset in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.InputStream">
            <summary>
            The input stream containing SGML data to parse.
            You must specify this property or the Href property before calling Read().
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.WebProxy">
            <summary>
            Sometimes you need to specify a proxy server in order to load data via HTTP
            from outside the firewall.  For example: "itgproxy:80".
            </summary>
        </member>
        <member name="M:Sgml.SgmlReader.SetBaseUri(System.String)">
            <summary>
            The base Uri is used to resolve relative Uri's like the SystemLiteral and
            Href properties.  This is a method because BaseURI is a read-only
            property on the base XmlReader class.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.Href">
            <summary>
            Specify the location of the input SGML document as a URL.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.StripDocType">
            <summary>
            Whether to strip out the DOCTYPE tag from the output (default true)
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.IgnoreDtd">
            <summary>
            Gets or sets a value indicating whether to ignore any DTD reference.
            </summary>
            <value><c>true</c> if DTD references should be ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Sgml.SgmlReader.CaseFolding">
            <summary>
            The case conversion behaviour while processing tags.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.ErrorLog">
            <summary>
            DTD validation errors are written to this stream.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.NodeType">
            <summary>
            The node type of the node currently being parsed.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.Name">
            <summary>
            The name of the current node, if currently positioned on a node or attribute.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.LocalName">
            <summary>
            The local name of the current node, if currently positioned on a node or attribute.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.NamespaceURI">
            <summary>
            The namespace of the current node, if currently positioned on a node or attribute.
            </summary>
            <remarks>
            If not positioned on a node or attribute, <see cref="F:Sgml.SgmlReader.UNDEFINED_NAMESPACE"/> is returned.
            </remarks>
        </member>
        <member name="P:Sgml.SgmlReader.Prefix">
            <summary>
            The prefix of the current node's name.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.HasValue">
            <summary>
            Whether the current node has a value or not.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.Value">
            <summary>
            The value of the current node.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.Depth">
            <summary>
            Gets the depth of the current node in the XML document.
            </summary>
            <value>The depth of the current node in the XML document.</value>
        </member>
        <member name="P:Sgml.SgmlReader.BaseURI">
            <summary>
            Gets the base URI of the current node.
            </summary>
            <value>The base URI of the current node.</value>
        </member>
        <member name="P:Sgml.SgmlReader.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.IsDefault">
            <summary>
            Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.
            </summary>
            <value>
            true if the current node is an attribute whose value was generated from the default value defined in the DTD or
            schema; false if the attribute value was explicitly set.
            </value>
        </member>
        <member name="P:Sgml.SgmlReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of an attribute node.
            </summary>
            <value>The quotation mark character (" or ') used to enclose the value of an attribute node.</value>
            <remarks>
            This property applies only to an attribute node.
            </remarks>
        </member>
        <member name="P:Sgml.SgmlReader.XmlSpace">
            <summary>
            Gets the current xml:space scope.
            </summary>
            <value>One of the <see cref="P:Sgml.SgmlReader.XmlSpace"/> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</value>
        </member>
        <member name="P:Sgml.SgmlReader.XmlLang">
            <summary>
            Gets the current xml:lang scope.
            </summary>
            <value>The current xml:lang scope.</value>
        </member>
        <member name="P:Sgml.SgmlReader.WhitespaceHandling">
            <summary>
            Specifies how white space is handled.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.AttributeCount">
            <summary>
            Gets the number of attributes on the current node.
            </summary>
            <value>The number of attributes on the current node.</value>
        </member>
        <member name="M:Sgml.SgmlReader.GetAttribute(System.String)">
            <summary>
            Gets the value of an attribute with the specified <see cref="P:Sgml.SgmlReader.Name"/>.
            </summary>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. </returns>
        </member>
        <member name="M:Sgml.SgmlReader.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of the attribute with the specified <see cref="P:Sgml.SgmlReader.LocalName"/> and <see cref="P:Sgml.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. This method does not move the reader.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.GetAttribute(System.Int32)">
            <summary>
            Gets the value of the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute.</param>
            <returns>The value of the specified attribute. This method does not move the reader.</returns>
        </member>
        <member name="P:Sgml.SgmlReader.Item(System.Int32)">
            <summary>
            Gets the value of the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute.</param>
            <returns>The value of the specified attribute. This method does not move the reader.</returns>
        </member>
        <member name="P:Sgml.SgmlReader.Item(System.String)">
            <summary>
            Gets the value of an attribute with the specified <see cref="P:Sgml.SgmlReader.Name"/>.
            </summary>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. </returns>
        </member>
        <member name="P:Sgml.SgmlReader.Item(System.String,System.String)">
            <summary>
            Gets the value of the attribute with the specified <see cref="P:Sgml.SgmlReader.LocalName"/> and <see cref="P:Sgml.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. This method does not move the reader.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.MoveToAttribute(System.String)">
            <summary>
            Moves to the atttribute with the specified <see cref="P:Sgml.SgmlReader.Name"/>.
            </summary>
            <param name="name">The qualified name of the attribute.</param>
            <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to the attribute with the specified <see cref="P:Sgml.SgmlReader.LocalName"/> and <see cref="P:Sgml.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="ns">The namespace URI of the attribute.</param>
            <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.MoveToAttribute(System.Int32)">
            <summary>
            Moves to the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute to move to.</param>
        </member>
        <member name="M:Sgml.SgmlReader.MoveToFirstAttribute">
            <summary>
            Moves to the first attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sgml.SgmlReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            <returns>true if there is a next attribute; false if there are no more attributes.</returns>
            <remarks>
            If the current node is an element node, this method is equivalent to <see cref="M:Sgml.SgmlReader.MoveToFirstAttribute"/>. If <see cref="M:Sgml.SgmlReader.MoveToNextAttribute"/> returns true,
            the reader moves to the next attribute; otherwise, the position of the reader does not change.
            </remarks>
        </member>
        <member name="M:Sgml.SgmlReader.MoveToElement">
            <summary>
            Moves to the element that contains the current attribute node.
            </summary>
            <returns>
            true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned
            on an attribute (the position of the reader does not change).
            </returns>
        </member>
        <member name="P:Sgml.SgmlReader.IsHtml">
            <summary>
            Gets whether the content is HTML or not.
            </summary>
        </member>
        <member name="M:Sgml.SgmlReader.GetEncoding">
            <summary>
            Returns the encoding of the current entity.
            </summary>
            <returns>The encoding of the current entity.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.Read">
            <summary>
            Reads the next node from the stream.
            </summary>
            <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.ScanLiteral(System.Text.StringBuilder,System.Char)">
            <summary>
            Consumes and returns a literal block of text, expanding entities as it does so.
            </summary>
            <param name="sb">The string builder to use.</param>
            <param name="quote">The delimiter for the literal.</param>
            <returns>The consumed literal.</returns>
            <remarks>
            This version is slightly different from <see cref="M:Sgml.Entity.ScanLiteral(System.Text.StringBuilder,System.Char)"/> in that
            it also expands entities.
            </remarks>
        </member>
        <member name="P:Sgml.SgmlReader.EOF">
            <summary>
            Gets a value indicating whether the reader is positioned at the end of the stream.
            </summary>
            <value>true if the reader is positioned at the end of the stream; otherwise, false.</value>
        </member>
        <member name="M:Sgml.SgmlReader.Dispose(System.Boolean)">
            <summary>
            Disposes this object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Sgml.SgmlReader.ReadState">
            <summary>
            Gets the state of the reader.
            </summary>
            <value>One of the ReadState values.</value>
        </member>
        <member name="M:Sgml.SgmlReader.ReadContentAsString">
            <summary>
            Reads the contents of an element or text node as a string.
            </summary>
            <returns>The contents of the element or an empty string.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.ReadInnerXml">
            <summary>
            Reads all the content, including markup, as a string.
            </summary>
            <returns>
            All the XML content, including markup, in the current node. If the current node has no children,
            an empty string is returned. If the current node is neither an element nor attribute, an empty
            string is returned.
            </returns>
        </member>
        <member name="M:Sgml.SgmlReader.ReadOuterXml">
            <summary>
            Reads the content, including markup, representing this node and all its children.
            </summary>
            <returns>
            If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.
            </returns>
        </member>
        <member name="P:Sgml.SgmlReader.NameTable">
            <summary>
            Gets the XmlNameTable associated with this implementation.
            </summary>
            <value>The XmlNameTable enabling you to get the atomized version of a string within the node.</value>
        </member>
        <member name="M:Sgml.SgmlReader.LookupNamespace(System.String)">
            <summary>
            Resolves a namespace prefix in the current element's scope.
            </summary>
            <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string.</param>
            <returns>The namespace URI to which the prefix maps or a null reference (Nothing in Visual Basic) if no matching prefix is found.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.ResolveEntity">
            <summary>
            Resolves the entity reference for EntityReference nodes.
            </summary>
            <exception cref="T:System.InvalidOperationException">SgmlReader does not resolve or return entities.</exception>
        </member>
        <member name="M:Sgml.SgmlReader.ReadAttributeValue">
            <summary>
            Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.
            </summary>
            <returns>
            true if there are nodes to return. false if the reader is not positioned on an attribute node when the initial call is made or if all the
            attribute values have been read. An empty attribute, such as, misc="", returns true with a single node with a value of string.Empty.
            </returns>
        </member>
    </members>
</doc>
